/*
* Copyright (c) Tomas Johansson , http://www.programmerare.com
* The code in this "core" project is licensed with MIT.
* Other projects within this Visual Studio solution may be released with other licenses e.g. Apache.
* Please find more information in the files "License.txt" and "NOTICE.txt" 
* in the project root directory and/or in the solution root directory.
* It should also be possible to find more license information at this URL:
* https://github.com/TomasJohansson/adapters-shortest-paths-dotnet/
*/
using System.Collections.Generic;

namespace Programmerare.ShortestPaths.Utils
{
    /// <summary>
    /// The purpose of this class is to provide mapping between strings and integer ids
    /// for those kind of implementations which requires integers as ids.
    /// For example if you want to provide data to an implementation you may want to specify the 
    /// two vertices and the weight for the edge between them like below:
    ///     A B 12.4
    ///     B C 13.7
    ///     A C 11.9
    /// However, some implementations (e.g. the current implementation of https://github.com/yan-qi/k-shortest-paths-java-version
    /// require that the vertices are specified with integers like this:
    ///     0 1 12.4
    ///     1 2 13.7
    ///     0 2 11.9 
    /// To be able to use such an implementation, this mapper class was created.
    /// </summary>
    public sealed class MapperForIntegerIdsAndGeneralStringIds {
	
	    private int integerCounterForVertices;
	
	    private readonly IDictionary<string, int> mapFromGeneralStringToIncreasingInteger = new Dictionary<string, int>();
	    private readonly IDictionary<int, string> mapFromIncreasingIntegerToGeneralString = new Dictionary<int, string>();
	
        /// <param name="integerIdForFirstVertex">probably either zero or one</param>
	    public static MapperForIntegerIdsAndGeneralStringIds CreateIdMapper(int integerIdForFirstVertex) {
		    return new MapperForIntegerIdsAndGeneralStringIds(integerIdForFirstVertex);
	    }
	
	    private MapperForIntegerIdsAndGeneralStringIds(int integerIdForFirstVertex) {
		    this.integerCounterForVertices = integerIdForFirstVertex - 1; // minus one because of increasing just before each usage
	    }

	    // --------------------------------------------------------------------------------
	    // --------------------------------------------------------------------------------
	    // The two methods below are the main methods of the class and they are named with the purpose of illustrating the flow,
	    // i.e. you first create (or retrieve if previously created) internally autogenerated integers which are mapped with 
	    // the string parameter, and then you can later get back the string with that integer by invoking the other method below.
	
	    public int CreateOrRetrieveIntegerId(string id) {
		    if(mapFromGeneralStringToIncreasingInteger.ContainsKey(id)) {
			    return mapFromGeneralStringToIncreasingInteger[id];
		    }
		    else {
			    integerCounterForVertices++;
			    mapFromGeneralStringToIncreasingInteger.Add(id,  integerCounterForVertices);
			    mapFromIncreasingIntegerToGeneralString.Add(integerCounterForVertices, id);
			    return integerCounterForVertices;
		    }
	    }
	    // The above and the below method belong together. See comment further above about how to use them.  
	    public string GetBackThePreviouslyStoredGeneralStringIdForInteger(int id) {
		    return mapFromIncreasingIntegerToGeneralString[id];
	    }
	    // --------------------------------------------------------------------------------
	    // --------------------------------------------------------------------------------	
	
	
	    public int GetNumberOfVertices() {
		    return mapFromGeneralStringToIncreasingInteger.Count;
	    }
    }
}